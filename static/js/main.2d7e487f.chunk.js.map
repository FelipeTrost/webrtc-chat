{"version":3,"sources":["App.js","index.js"],"names":["stream","App","peer","useRef","videoRef","partnerVideoRef","useState","iceCandidatesList","setIceCandidatesList","undefined","makingOffer","setMakingOffer","copyRef","input","setInput","iceCList","setIceCList","createPeer","offering","peerInstance","RTCPeerConnection","iceServers","urls","credential","username","getTracks","forEach","track","addTrack","onnegotiationneeded","createOffer","then","offer","setLocalDescription","copy","JSON","stringify","localDescription","catch","e","console","log","ontrack","streams","oninactive","alert","current","srcObject","onicecandidate","candidate","l","createDataChannel","title","insturction","text","value","select","document","execCommand","constraints","a","navigator","mediaDevices","getUserMedia","audio","video","error","useEffect","getMedia","className","ref","height","width","autoPlay","muted","onClick","onChange","target","answer","desc","RTCSessionDescription","setRemoteDescription","recieveAnser","parse","createAnswer","recieveOffer","list","addIceCandidate","RTCIceCandidate","handleIceCantidates","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2d7e487f.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\n\nlet stream = null;\n\nfunction App() {\n  const peer = useRef();\n  const videoRef = useRef();\n  const partnerVideoRef = useRef();\n  const [iceCandidatesList, setIceCandidatesList] = useState([])\n  const [makingOffer, setMakingOffer] = useState(undefined);\n  const copyRef = useRef();\n\n  const [input, setInput] = useState(\"\");\n  const [iceCList, setIceCList] = useState(\"\");\n\n  const createPeer = offering => {\n    const peerInstance = new RTCPeerConnection({\n      iceServers: [\n          {\n              urls: \"stun:stun.stunprotocol.org\"\n          },\n          {\n              urls: 'turn:numb.viagenie.ca',\n              credential: 'muazkh',\n              username: 'webrtc@live.com'\n          },\n      ]\n    });\n\n    stream.getTracks().forEach(track => peerInstance.addTrack(track, stream));\n\n    if(offering)\n      peerInstance.onnegotiationneeded = () => {\n        peerInstance.createOffer()\n        .then(offer => peerInstance.setLocalDescription(offer))\n        .then(() => {\n          copy(\"offer\", \"paste it into the target user\" ,JSON.stringify(peerInstance.localDescription))\n        }).catch(e => console.log(e));\n      };\n\n    peerInstance.ontrack = e => {\n      console.log(\"got track\", e.streams);\n      e.streams[0].oninactive = alert(\"inactive\")\n      partnerVideoRef.current.srcObject = e.streams[0]\n    };\n\n    peerInstance.onicecandidate = e => {\n      if (e.candidate) {\n          // copy(\"ice candidate\", \"paste it to the ice candidate manager from the other user\", JSON.stringify(e.candidate));\n          setIceCandidatesList(l => [...l, e.candidate])\n      }\n    }\n\n    peerInstance.createDataChannel(\"hola\", {\n\n    });\n\n     peer.current = peerInstance;\n  }\n\n  const recieveOffer = offer => {\n    const desc = new RTCSessionDescription(offer);\n\n    peer.current.setRemoteDescription(desc)\n    .then(() => peer.current.createAnswer())\n    .then(answer =>  peer.current.setLocalDescription(answer))\n    .then(() => {\n        copy(\"answer\", \"paste the answer into the initiator\", JSON.stringify(peer.current.localDescription));\n    })\n  }\n\n  const handleIceCantidates = list => {\n    for(const candidate of list){\n      peer.current.addIceCandidate(new RTCIceCandidate(candidate))\n          .catch(e => console.log(e));\n    }\n  }\n\n  const recieveAnser = answer => {\n    const desc = new RTCSessionDescription(answer);\n    peer.current.setRemoteDescription(desc).catch(e => console.log(e));\n}\n\n  const copy = (title, insturction, text) => {\n    copyRef.current.value = text;\n    copyRef.current.select();\n    document.execCommand('copy');\n\n    alert(`Copied ${title} to your clipboard\\n${insturction}`)\n  }\n\n  async function getMedia(constraints) {\n    try {\n      stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      });\n      videoRef.current.srcObject = stream\n    } catch(err) {\n      console.error(err);\n    }\n  }\n\n  useEffect(() => { getMedia() }, []);\n\n  return (\n    <div className=\"App\">\n        <video ref={videoRef} height=\"400px\" width=\"400px\" autoPlay muted />\n        <video ref={partnerVideoRef} height=\"400px\" width=\"400px\" autoPlay />\n        <br />\n\n        {makingOffer === undefined && (<>\n          <button onClick={() => {\n            setMakingOffer(true)\n            createPeer(true)\n          }}>\n            Make offer\n          </button>\n          \n          <button onClick={() => {\n            setMakingOffer(false)\n            createPeer(false)\n          }}>\n            Recieve offer\n          </button>\n        </>)}\n\n        {makingOffer !== undefined &&( makingOffer ? (<>\n          <p>Recieve answer</p>\n          <input value={input} onChange={e => setInput(e.target.value)} />\n          <button onClick={() => recieveAnser(JSON.parse(input))}>\n            Recieve answer\n          </button>\n        </>) : (<>\n          <p>Recieve offer</p>\n          <input value={input} onChange={e => setInput(e.target.value)} />\n          <button onClick={() => recieveOffer(JSON.parse(input))}>\n            Recieve Offer\n          </button>\n        </>))}\n\n        {makingOffer !== undefined && (<>\n          <p>Recieve ice candidates list</p>\n          <input value={iceCList} onChange={e => setIceCList(e.target.value)} />\n          <button onClick={() => handleIceCantidates(JSON.parse(iceCList))}>\n            handle ice candidates\n          </button>\n        </>)}\n\n        <p>\n          Ice candidates, paste them into the other user\n          <button onClick={() => copy(\"ice-candidates\", \"\", JSON.stringify(iceCandidatesList))}>\n            Copy\n          </button>\n        </p>\n\n        <p> {JSON.stringify(iceCandidatesList)} </p>\n\n        <p>Text to copy</p>\n        <input ref={copyRef}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}